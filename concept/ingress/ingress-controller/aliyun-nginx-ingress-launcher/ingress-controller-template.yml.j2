apiVersion: v1
kind: Namespace
metadata:
  name: {{Namespace}}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{IngressClass}}--admin
  namespace: {{Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: {{IngressClass}}--admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: {{IngressClass}}--admin
  namespace: kube-system
- kind: ServiceAccount
  name: {{IngressClass}}--admin
  namespace: {{Namespace}}
---
# nginx ingress service
apiVersion: v1
kind: Service
metadata:
  name: {{IngressClass}}--nginx-ingress-lb
  namespace: {{Namespace}}
  labels:
    app: {{IngressClass}}--nginx-ingress-lb
  annotations:
    {% if LoadbalancerID -%}
    # set loadbalancer to the specified slb id
    service.beta.kubernetes.io/alicloud-loadbalancer-id: {{LoadbalancerID}}
    {% endif -%}
    # set loadbalancer address type to intranet if using private slb instance
    #service.beta.kubernetes.io/alicloud-loadbalancer-address-type: intranet
    service.beta.kubernetes.io/alicloud-loadbalancer-force-override-listeners: 'true'
spec:
  type: LoadBalancer
  # do not route traffic to other nodes
  # and reserve client ip for upstream
  externalTrafficPolicy: "Local"
  ports:
  - port: 80
    name: http
    targetPort: 80
  - port: 443
    name: https
    targetPort: 443
  selector:
    # select app=ingress-nginx pods
    app: ingress-nginx
---
# nginx config map
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: {{Namespace}}
  labels:
    app: ingress-nginx
data:
    proxy-body-size: 20m
    proxy-connect-timeout: "10"
    max-worker-connections: "65536"
    enable-underscores-in-headers: "true"
    #compute-full-forwarded-for: "true"
    #hsts: "false"
    #enable-vts-status: "true"
    #ssl-redirect: "false"
    #use-proxy-protocol: "true"
    #upstream-max-fails: "2"
    #upstream-fail-timeout: "10"
---
# nginx tcp stream config map
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: {{Namespace}}
---
# nginx udp stream config map
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: {{Namespace}}
---
# default http backend pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{IngressClass}}--default-http-backend
  labels:
    app: {{IngressClass}}--default-http-backend
  namespace: {{Namespace}}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{IngressClass}}--default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: {{IngressClass}}--default-http-backend
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: registry.cn-hangzhou.aliyuncs.com/acs/defaultbackend:1.4
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---
# default http backend service
apiVersion: v1
kind: Service
metadata:
  name: {{IngressClass}}--default-http-backend
  namespace: {{Namespace}}
  labels:
    app: {{IngressClass}}--default-http-backend
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: {{IngressClass}}--default-http-backend
---
# nginx ingress pods
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{IngressClass}}--nginx-ingress-controller
  labels:
    app: ingress-nginx
  namespace: {{Namespace}}
  annotations:
    component.version: '0.15.0'
    component.revision: '3'
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ingress-nginx
  template:
    metadata:
      labels:
        app: ingress-nginx
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
      #annotations:
      #  prometheus.io/port: '10254'
      #  prometheus.io/scrape: 'true'
    spec:
      #tolerations:
      #  - key: node-role.kubernetes.io/master
      #    effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ingress-nginx
              topologyKey: "kubernetes.io/hostname"
      serviceAccount: {{IngressClass}}--admin
      initContainers:
      - name: init-sysctl
        image: registry.cn-hangzhou.aliyuncs.com/acs/aliyun-ingress-controller:0.15.0-3
        command:
        - /bin/sh
        - -c
        - |
          sysctl -w net.core.somaxconn=65535
          sysctl -w net.ipv4.ip_local_port_range="1024 65535"
          sysctl -w fs.file-max=1048576
          sysctl -w fs.inotify.max_user_instances=16384
          sysctl -w fs.inotify.max_user_watches=524288
          sysctl -w fs.inotify.max_queued_events=16384
        securityContext:
          privileged: true
      containers:
      - name: nginx-ingress-controller
        image: registry.cn-hangzhou.aliyuncs.com/acs/aliyun-ingress-controller:0.15.0-3
        #imagePullPolicy: Always
        args:
          - /nginx-ingress-controller
          - --default-backend-service=$(POD_NAMESPACE)/{{IngressClass}}--default-http-backend
          - --configmap=$(POD_NAMESPACE)/nginx-configuration
          - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
          - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
          - --annotations-prefix=nginx.ingress.kubernetes.io
          - --publish-service=$(POD_NAMESPACE)/{{IngressClass}}--nginx-ingress-lb
          {% if IngressClass -%}
          - --ingress-class={{IngressClass}}
          {% endif -%}
          {% if WatchNamespace -%}
          - --watch-namespace={{WatchNamespace}}
          {% endif -%}
          #- --enable-dynamic-configuration=true
          - --v=2
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          privileged: true
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
